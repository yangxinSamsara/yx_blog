(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{440:function(s,t,a){"use strict";a.r(t);var r=a(34),e=Object(r.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"javascript-基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-基础"}},[s._v("#")]),s._v(" JavaScript 基础")]),s._v(" "),a("h2",{attrs:{id:"commonjs-和-esm-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commonjs-和-esm-的区别"}},[s._v("#")]),s._v(" CommonJS 和 ESM 的区别")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("CommonJS")]),s._v(" "),a("ul",[a("li",[s._v("CommonJs可以动态加载语句，代码发生在运行时")]),s._v(" "),a("li",[s._v("CommonJs混合导出，还是一种语法，只不过不用声明前面对象而已，当我导出引用对象时之前的导出就被覆盖了")]),s._v(" "),a("li",[s._v("CommonJs导出值是拷贝，可以修改导出的值，这在代码出错时，不好排查引起变量污染")])])]),s._v(" "),a("li",[a("p",[s._v("Es Module")])])]),s._v(" "),a("ul",[a("li",[s._v("Es Module是静态的，不可以动态加载语句，只能声明在该文件的最顶部，代码发生在编译时")]),s._v(" "),a("li",[s._v("Es Module混合导出，单个导出，默认导出，完全互不影响")]),s._v(" "),a("li",[s._v("Es Module导出是引用值之前都存在映射关系，并且值都是可读的，不能修改")])]),s._v(" "),a("h2",{attrs:{id:"js加载方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js加载方式"}},[s._v("#")]),s._v(" js加载方式")]),s._v(" "),a("p",[s._v("传统加载：通过"),a("script",[s._v('进行同步或异步加载脚本\n同步加载：<script src="">')]),s._v("\nDefer 异步加载："),a("script",{attrs:{src:"",defer:""}}),s._v("(顺序加载，渲染完再执行)\nAsync 异步加载："),a("script",{attrs:{src:"",async:""}}),s._v("(乱序加载，下载完就执行)\n模块加载："),a("script",{attrs:{type:"module",src:""}}),s._v("(默认是 Defer 异步加载)")]),s._v(" "),a("h2",{attrs:{id:"es5与es6继承的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es5与es6继承的区别"}},[s._v("#")]),s._v(" es5与es6继承的区别")]),s._v(" "),a("ol",[a("li",[s._v("先后顺序，es6先class")]),s._v(" "),a("li",[s._v("class必须用new调用，es5可以直接调用\nES5 实质：先创造子类实例的 this，再将父类的属性方法添加到 this 上(Parent.apply(this))\nES6 实质：先将父类实例的属性方法加到 this 上(调用 super())，再用子类构造函数修改 this")])]),s._v(" "),a("h2",{attrs:{id:"let-var-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let-var-const"}},[s._v("#")]),s._v(" let var const")]),s._v(" "),a("p",[s._v("| var | let | const |\n| 可以重复声明 | 不可以 | 不可以 |\n| 存在变量提升 | 暂时性死区 | 暂时性死区 |\n| 全局作用域 添加到window上 | 块级作用域 | 块级作用域 |\n| 声明后可以修改 | 可以 | 不可以（声明时必须赋值，对象可以修改属性值） |")])])}),[],!1,null,null,null);t.default=e.exports}}]);